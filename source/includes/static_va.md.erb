# VA Aggregator

API VA aggregator allows you to create a unique Virtual Account (VA) number as a payment method for your customers.

### VA Aggregator API Base URL

**[Production Base URL]**: `<%= config[:endpoint_prod] %>`<br/>
**[Staging Base URL]**: `<%= config[:endpoint_stg] %>`

## Create VA

Use this API to create new VA number

```shell
curl -X \
POST <%= config[:endpoint_prod] %>/api/generate-static-va
-H 'content-type: application/json' \
-H 'accept: application/json' \
-H 'x-oy-username: username' \
-H 'x-api-key: apikey' \
-d '{
    "partner_user_id":"51200021",
    "bank_code": "002",
    "amount": 0,
    "is_open": true,
    "is_single_use" : false,
    "is_lifetime": false,
    "expiration_time": 5,
    "username_display": "va name",
    "email": "email@mail.com",
    "trx_expiration_time": 5,
    "partner_trx_id": "TRX0001",
    "trx_counter" : 1
}'
```

```dart
var headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api-key}}'
};
var request = http.Request('POST', Uri.parse('{{base_url}}/api/generate-static-va'));
request.body = json.encode({
   "partner_user_id":"51200021",
   "bank_code": "002",
   "amount": 0,
   "is_open": true,
   "is_single_use" : false,
   "is_lifetime": false,
   "expiration_time": 5,
   "username_display": "va name",
   "email": "email@mail.com",
   "trx_expiration_time": 5,
   "partner_trx_id": "TRX0001",
   "trx_counter" : 1
});
request.headers.addAll(headers);

http.StreamedResponse response = await request.send();

if (response.statusCode == 200) {
  print(await response.stream.bytesToString());
}
else {
  print(response.reasonPhrase);
}
```

```go
package main

import (
  "fmt"
  "strings"
  "net/http"
  "io/ioutil"
)

func main() {

  url := "%7B%7Bbase_url%7D%7D/api/generate-static-va"
  method := "POST"

  payload := strings.NewReader(`{
	"partner_user_id":"51200021",
  "bank_code": "002",
  "amount": 0,
  "is_open": true,
  "is_single_use" : false,
  "is_lifetime": false,
  "expiration_time": 5,
  "username_display": "va name",
  "email": "email@mail.com",
  "trx_expiration_time": 5,
  "partner_trx_id": "TRX0001",
  "trx_counter" : 1
}`)

  client := &http.Client {
  }
  req, err := http.NewRequest(method, url, payload)

  if err != nil {
    fmt.Println(err)
    return
  }
  req.Header.Add("Content-Type", "application/json")
  req.Header.Add("X-Oy-Username", "{{username}}")
  req.Header.Add("X-Api-Key", "{{api-key}}")

  res, err := client.Do(req)
  if err != nil {
    fmt.Println(err)
    return
  }
  defer res.Body.Close()

  body, err := ioutil.ReadAll(res.Body)
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(string(body))
}
```

```java
OkHttpClient client = new OkHttpClient().newBuilder()
  .build();
MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\n\"partner_user_id\":\"51200021\",\n\"bank_code\": \"002\",\n\"amount\": 0,\n\"is_open\": true,\n\"is_single_use\" : false,\n\"is_lifetime\": false,\n\"expiration_time\": 5,\n\"username_display\": \"va name\",\n\"email\": \"email@mail.com\",\n\"trx_expiration_time\": 5,\n\"partner_trx_id\": \"TRX0001\",\n\"trx_counter\" : 1\n}");
Request request = new Request.Builder()
  .url("{{base_url}}/api/generate-static-va")
  .method("POST", body)
  .addHeader("Content-Type", "application/json")
  .addHeader("X-Oy-Username", "{{username}}")
  .addHeader("X-Api-Key", "{{api-key}}")
  .build();
Response response = client.newCall(request).execute();
```

```javascript
var data = JSON.stringify({
  "partner_user_id":"51200021",
  "bank_code": "002",
  "amount": 0,
  "is_open": true,
  "is_single_use" : false,
  "is_lifetime": false,
  "expiration_time": 5,
  "username_display": "va name",
  "email": "email@mail.com",
  "trx_expiration_time": 5,
  "partner_trx_id": "TRX0001",
  "trx_counter" : 1
});

var xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function() {
  if(this.readyState === 4) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "%7B%7Bbase_url%7D%7D/api/generate-static-va");
xhr.setRequestHeader("Content-Type", "application/json");
xhr.setRequestHeader("X-Oy-Username", "{{username}}");
xhr.setRequestHeader("X-Api-Key", "{{api-key}}");

xhr.send(data);
```

```php
<?php
require_once 'HTTP/Request2.php';
$request = new HTTP_Request2();
$request->setUrl('{{base_url}}/api/generate-static-va');
$request->setMethod(HTTP_Request2::METHOD_POST);
$request->setConfig(array(
  'follow_redirects' => TRUE
));
$request->setHeader(array(
  'Content-Type' => 'application/json',
  'X-Oy-Username' => '{{username}}',
  'X-Api-Key' => '{{api-key}}'
));
$request->setBody('"{\n\"partner_user_id\":\"51200021\",\n\"bank_code\": \"002\",\n\"amount\": 0,\n\"is_open\": true,\n\"is_single_use\" : false,\n\"is_lifetime\": false,\n\"expiration_time\": 5,\n\"username_display\": \"va name\",\n\"email\": \"email@mail.com\",\n\"trx_expiration_time\": 5,\n\"partner_trx_id\": \"TRX0001\",\n\"trx_counter\" : 1\n}"');
try {
  $response = $request->send();
  if ($response->getStatus() == 200) {
    echo $response->getBody();
  }
  else {
    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .
    $response->getReasonPhrase();
  }
}
catch(HTTP_Request2_Exception $e) {
  echo 'Error: ' . $e->getMessage();
}
```

```python
import http.client
import json

conn = http.client.HTTPSConnection("{{base_url}}")
payload = json.dumps({
  "partner_user_id":"51200021",
  "bank_code": "002",
  "amount": 0,
  "is_open": true,
  "is_single_use" : false,
  "is_lifetime": false,
  "expiration_time": 5,
  "username_display": "va name",
  "email": "email@mail.com",
  "trx_expiration_time": 5,
  "partner_trx_id": "TRX0001",
  "trx_counter" : 1
})
headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api-key}}'
}
conn.request("POST", "/api/generate-static-va", payload, headers)
res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))
```

> The above command returns JSON structured similar like this:

```json
{
    "id": "12345b1-23be-45670-a123-5ca678f12b3e",
    "status": {
        "code": "000",
        "message": "Success"
    },
    "amount": 0,
    "va_number": "123456789182827272",
    "bank_code": "002",
    "is_open": true,
    "is_single_use": false,
    "expiration_time": 1582783668175,
    "va_status": "WAITING_PAYMENT",
    "username_display": "va name",
    "partner_user_id" : "51200021",
    "counter_incoming_payment": 0,
    "partner_trx_id": "TRX0001",
    "trx_expiration_time": 1582783668175,
    "trx_counter": 1
}
```

### HTTPS Request
**[Production]** `POST <%= config[:endpoint_prod] %>/api/generate-static-va` <br/>
**[Staging]** `POST <%= config[:endpoint_stg] %>/api/generate-static-va`

### Request Parameters

Parameter | Type | Required | Default | Description
--------- | ---- | -------- | ------- | -----------
partner_user_id | String(255) | TRUE | - | Partner unique ID for specific user
bank_code | String(3) | TRUE | - | Bank code which the VA number will be generated. Refer to [VA Bank Code](https://api-docs.oyindonesia.com/#va-aggregator-bank-code-va-aggregator)
amount | BigDecimal | FALSE | 0 | Amount your user must paid to complete the transaction, if is_open is false, amount is required.
is_open | Boolean | FALSE | true | If set true means VA number can accept any amount, field `amount` can be optional, if set false means VA number only accept the specified amount in the field amount. When you set `is_open` to false, you must specify amount field.
is_single_use | Boolean | FALSE | false | True means that this VA should be closed once there is a successful payment that is being made to this VA.
expiration_time | Long | FALSE | - | Expiration time of the VA in minutes, e.g If VA want to be expired after 5 minutes, you just have to set expiration_time to 5. If empty VA will be expired in 24 hour
is_lifetime | Boolean | FALSE | FALSE | If it is set to FALSE (default) then VA will expire based on the expiration time. Otherwise, it will remain active.
username_display | String(255) | FALSE | username | Customizable VA display name that will be seen by user, If empty willl be using partner username
email | String(255) | FALSE | - | Email of user, using email standard format
trx_expiration_time | Long | FALSE | - | Transaction expiration time in minutes, e.g If Transaction want to be expired after 5 minutes, you just have to set expiration_time to 5. If empty transaction expiration time will be the same with va expiration time
partner_trx_id | String(255) | FALSE | - | Partner unique Transaction ID of a VA
trx_counter | Int | FALSE | -1/1 | Transaction counter to limit number of transaction that can be receive by va number, if empty will be use default value -1 for multiple use va, and 1 for single use va. If counter reach zero, va cannot be inquiry or accept payment.

### Response Parameters

Parameter | Type | Description
--------- | ---- | -----------
status | Object | Status of response in Object `{code: <status_code>, message: <status_message>}`
amount | BigDecimal | Amount of VA transaction
va_number | String(20) | Generated VA number
id | String(36) | Unique VA ID
partner_user_id | String(255) | Your unique ID for specific user
bank_code | String(3) | Bank code for VA, see [VA Bank Code](https://api-docs.oyindonesia.com/#va-aggregator-bank-code-va-aggregator)
is_open | Boolean | True means VA number can accept any amount, False means VA number only accept the specified amount in the field amount
is_single_use | Boolean | True means that this VA should be closed/complete once there is a successful payment that is being made to this VA.
expiration_time | Long | Expiration time of VA on Unix timestamp in milliseconds, -1 means no expiration time.
va_status | String(16) | Status of VA, see [VA Status](https://api-docs.oyindonesia.com/#va-aggregator-status-va-aggregator)
username_display | String(255) | Customizable VA display name that will be seen by user, If empty willl be using partner username
trx_expiration_time | Long | Transaction expiration time on Unix timestamp in milliseconds, -1 means no expiration time.
partner_trx_id | String(255) | Partner unique Transaction ID of a VA
trx_counter | Int | Transaction counter to limit number of transaction that can be receive by va number, if empty will be use default value -1 for multiple use va, and 1 for single use va. If counter reach zero, va cannot be inquiry or accept payment.
counter_incoming_payment | Integer | Count total incoming payment of VA

<aside class="warning">
Note: For payments and inquiries involving a BSI VA using BSI Mobile or Banking Syariah Indonesia Net, please only input the last 12 digits of the va_number (remove 6059 from the va_number with format "6059xxxxxxxxxxxx"). This does not apply to payments and inquiries involving a BSI VA using other methods
</aside>

## Get VA Info

Get VA info using Unique VA id.

```shell
curl -X \
GET <%= config[:endpoint_prod] %>/api/static-virtual-account/1414255-12121-21212121-212121
-H 'content-type: application/json' \
-H 'accept: application/json' \
-H 'x-oy-username: username' \
-H 'x-api-key: apikey'
```

```dart
var headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api_key}}'
};
var request = http.Request('GET', Uri.parse('{{base_url}}/api/static-virtual-account/2c26f23d-2dfa-44d1-9202-f8c1f907a983'));

request.headers.addAll(headers);

http.StreamedResponse response = await request.send();

if (response.statusCode == 200) {
  print(await response.stream.bytesToString());
}
else {
  print(response.reasonPhrase);
}
```

```go
package main

import (
  "fmt"
  "net/http"
  "io/ioutil"
)

func main() {

  url := "%7B%7Bbase_url%7D%7D/api/static-virtual-account/2c26f23d-2dfa-44d1-9202-f8c1f907a983"
  method := "GET"

  client := &http.Client {
  }
  req, err := http.NewRequest(method, url, nil)

  if err != nil {
    fmt.Println(err)
    return
  }
  req.Header.Add("Content-Type", "application/json")
  req.Header.Add("X-Oy-Username", "{{username}}")
  req.Header.Add("X-Api-Key", "{{api_key}}")

  res, err := client.Do(req)
  if err != nil {
    fmt.Println(err)
    return
  }
  defer res.Body.Close()

  body, err := ioutil.ReadAll(res.Body)
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(string(body))
}
```

```java
OkHttpClient client = new OkHttpClient().newBuilder()
  .build();
Request request = new Request.Builder()
  .url("{{base_url}}/api/static-virtual-account/2c26f23d-2dfa-44d1-9202-f8c1f907a983")
  .method("GET", null)
  .addHeader("Content-Type", "application/json")
  .addHeader("X-Oy-Username", "{{username}}")
  .addHeader("X-Api-Key", "{{api_key}}")
  .build();
Response response = client.newCall(request).execute();
```

```javascript

var xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function() {
  if(this.readyState === 4) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "%7B%7Bbase_url%7D%7D/api/static-virtual-account/2c26f23d-2dfa-44d1-9202-f8c1f907a983");
xhr.setRequestHeader("Content-Type", "application/json");
xhr.setRequestHeader("X-Oy-Username", "{{username}}");
xhr.setRequestHeader("X-Api-Key", "{{api_key}}");

xhr.send();
```

```php
<?php
require_once 'HTTP/Request2.php';
$request = new HTTP_Request2();
$request->setUrl('{{base_url}}/api/static-virtual-account/2c26f23d-2dfa-44d1-9202-f8c1f907a983');
$request->setMethod(HTTP_Request2::METHOD_GET);
$request->setConfig(array(
  'follow_redirects' => TRUE
));
$request->setHeader(array(
  'Content-Type' => 'application/json',
  'X-Oy-Username' => '{{username}}',
  'X-Api-Key' => '{{api_key}}'
));
try {
  $response = $request->send();
  if ($response->getStatus() == 200) {
    echo $response->getBody();
  }
  else {
    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .
    $response->getReasonPhrase();
  }
}
catch(HTTP_Request2_Exception $e) {
  echo 'Error: ' . $e->getMessage();
}
```

```python
import http.client
import json

conn = http.client.HTTPSConnection("{{base_url}}")
payload = ''
headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api_key}}'
}
conn.request("GET", "/api/static-virtual-account/2c26f23d-2dfa-44d1-9202-f8c1f907a983", payload, headers)
res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))
```

> The above command returns JSON structured similar like this:

```json
{
    "id": "1414255-12121-21212121-212121",
    "status": {
        "code": "000",
        "message": "Success"
    },
    "amount": 10000.0000,
    "va_number": "1233456000000000001",
    "bank_code": "002",
    "bank_name": "Bank BRI",
    "is_open": true,
    "is_single_use": false,
    "expiration_time": 1582790250609,
    "va_status": "WAITING_PAYMENT",
    "username_display": "username",
    "amount_detected": 0,
    "partner_user_id": "123456",
    "created": 1613545965167,
    "counter_incoming_payment": 0,
    "trx_expiration_time": 1582790250609,
    "partner_trx_id": "TRX0001",
    "trx_counter": -1
}
```

### HTTPS Request
**[Production]** `GET <%= config[:endpoint_prod] %>/api/static-virtual-account/<ID>` <br/>
**[Staging]** `GET <%= config[:endpoint_stg] %>/api/static-virtual-account/<ID>`

### URL Parameters

Parameter | Type | Required | Default | Description
--------- | ---- | -------- | ------- | -----------
ID | String(255) | TRUE | - | Unique VA id, you can get this once you success created VA

### Response Parameters

Parameter | Type | Description
--------- | ---- | -----------
id | String |  Unique VA id
status | Object | Status of response in Object `{code: <status_code>, message: <status_message>}`
amount | BigDecimal | Amount of VA transaction
va_number | String(20) | Generated VA number
bank_code | String(3) | Bank code for VA, see [VA Bank Code](https://api-docs.oyindonesia.com/#va-aggregator-bank-code-va-aggregator)
bank_name | String(10) | Bank name of the VA
is_open | Boolean | True means VA number can accept any amount, False means VA number only accept the specified amount in the field amount
is_single_use | Boolean | True means that this VA should be closed once there is a successful payment that is being made to this VA.
expiration_time | Long | Expiration time of VA on Unix timestamp in milliseconds, -1 means no expiration time.
va_status | String(16) | Status of VA, see [VA Status](https://api-docs.oyindonesia.com/#va-aggregator-status-va-aggregator)
username_display | String(255) | Customizable VA display name that will be seen by user, If empty willl be using partner username
partner_user_id | String(255) | Partner unique ID for specific user
created | Long | Unix timestamp in milliseconds when VA created
counter_incoming_payment | Integer | Count total incoming payment of VA
trx_expiration_time | Long | Transaction expiration time on Unix timestamp in milliseconds, -1 means no expiration time.
partner_trx_id | String(255) | Partner unique Transaction ID of a VA
trx_counter | Int | Transaction counter to limit number of transaction that can be receive by va number, if empty will be use default value -1 for multiple use va, and 1 for single use va. If counter reach zero, va cannot be inquiry or accept payment.

<aside class="warning">
Note: For payments and inquiries involving a BSI VA using BSI Mobile or Banking Syariah Indonesia Net, please only input the last 12 digits of the va_number (remove 6059 from the va_number with format "6059xxxxxxxxxxxx"). This does not apply to payments and inquiries involving a BSI VA using other methods
</aside>

## Update VA

Update VA using unique VA id.

```shell
curl -X \
PUT <%= config[:endpoint_prod] %>/api/static-virtual-account/1414255-12121-21212121-212121
-H 'content-type: application/json' \
-H 'accept: application/json' \
-H 'x-oy-username: username' \
-H 'x-api-key: apikey' \
-d '{
    "amount": 50000,
    "is_single_use": false,
    "expiration_time": 30,
    "username_display": "test",
    "is_lifetime": false,
    "email": "email@domain.com",
    "trx_expiration_time":5,
    "partner_trx_id":"TRX0002",
    "trx_counter": 1
}'
```

```dart
var headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api-key}}'
};
var request = http.Request('PUT', Uri.parse('{{base_url}}/api/static-virtual-account/2701b82a-89f8-4343-81a2-fa0c92edca09'));
request.body = json.encode({
  "amount": 50000,
  "is_single_use": false,
  "expiration_time": 30,
  "username_display": "test",
  "is_lifetime": false,
  "email": "email@domain.com",
  "trx_expiration_time":5,
  "partner_trx_id":"TRX0002",
  "trx_counter": 1
});
request.headers.addAll(headers);

http.StreamedResponse response = await request.send();

if (response.statusCode == 200) {
  print(await response.stream.bytesToString());
}
else {
  print(response.reasonPhrase);
}
```

```go
package main

import (
  "fmt"
  "strings"
  "net/http"
  "io/ioutil"
)

func main() {

  url := "%7B%7Bbase_url%7D%7D/api/static-virtual-account/2701b82a-89f8-4343-81a2-fa0c92edca09"
  method := "PUT"

  payload := strings.NewReader(`{
	"amount": 50000,
	"is_single_use": true,
	"expiration_time": 30,
	"username_display": "john doe",
	"is_lifetime": false,
	"email": "john.doe@email.com",
	"trx_expiration_time":5,
  "partner_trx_id":"TRX0002",
  "trx_counter": 1
}`)

  client := &http.Client {
  }
  req, err := http.NewRequest(method, url, payload)

  if err != nil {
    fmt.Println(err)
    return
  }
  req.Header.Add("Content-Type", "application/json")
  req.Header.Add("X-Oy-Username", "{{username}}")
  req.Header.Add("X-Api-Key", "{{api-key}}")

  res, err := client.Do(req)
  if err != nil {
    fmt.Println(err)
    return
  }
  defer res.Body.Close()

  body, err := ioutil.ReadAll(res.Body)
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(string(body))
}
```

```java
OkHttpClient client = new OkHttpClient().newBuilder()
  .build();
MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\n\t\"amount\": 50000,\n\t\"is_single_use\": false,\n\t\"expiration_time\": 30,\n\t\"username_display\": "test",\n\t\"is_lifetime\": false,\n\t\"email\": "email@domain.com",\n\t\"trx_expiration_time\": 5,\n\t\"partner_trx_id\": \"TRX0002\",\n\t\"trx_counter\": 1\n}");
Request request = new Request.Builder()
  .url("{{base_url}}/api/static-virtual-account/2701b82a-89f8-4343-81a2-fa0c92edca09")
  .method("PUT", body)
  .addHeader("Content-Type", "application/json")
  .addHeader("X-Oy-Username", "{{username}}")
  .addHeader("X-Api-Key", "{{api-key}}")
  .build();
Response response = client.newCall(request).execute();
```

```javascript
var data = JSON.stringify({
  "amount": 50000,
  "is_single_use": false,
  "expiration_time": 30,
  "username_display": "test",
  "is_lifetime": false,
  "email": "email@domain.com",
  "trx_expiration_time":5,
  "partner_trx_id":"TRX0002",
  "trx_counter": 1
});

var xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function() {
  if(this.readyState === 4) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "%7B%7Bbase_url%7D%7D/api/static-virtual-account/2701b82a-89f8-4343-81a2-fa0c92edca09");
xhr.setRequestHeader("Content-Type", "application/json");
xhr.setRequestHeader("X-Oy-Username", "{{username}}");
xhr.setRequestHeader("X-Api-Key", "{{api-key}}");

xhr.send(data);
```

```php
<?php
require_once 'HTTP/Request2.php';
$request = new HTTP_Request2();
$request->setUrl('{{base_url}}/api/static-virtual-account/2701b82a-89f8-4343-81a2-fa0c92edca09');
$request->setMethod(HTTP_Request2::METHOD_PUT);
$request->setConfig(array(
  'follow_redirects' => TRUE
));
$request->setHeader(array(
  'Content-Type' => 'application/json',
  'X-Oy-Username' => '{{username}}',
  'X-Api-Key' => '{{api-key}}'
));
$request->setBody('{\n	"amount": 50000,\n	"is_single_use": false,\n	"expiration_time": 30,\n	"username_display": "test",\n	"is_lifetime": false,\n	"email": "email@domain.com",\n	"trx_expiration_time": 5,\n	"partner_trx_id": "TRX0002",\n	"trx_counter": 1\n}');
try {
  $response = $request->send();
  if ($response->getStatus() == 200) {
    echo $response->getBody();
  }
  else {
    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .
    $response->getReasonPhrase();
  }
}
catch(HTTP_Request2_Exception $e) {
  echo 'Error: ' . $e->getMessage();
}
```

```python
import http.client
import json

conn = http.client.HTTPSConnection("{{base_url}}")
payload = json.dumps({
  "amount": 50000,
  "is_single_use": false,
  "expiration_time": 30,
  "username_display": "test",
  "is_lifetime": false,
  "email": "email@domain.com",
  "trx_expiration_time":5,
  "partner_trx_id":"TRX0002",
  "trx_counter": 1
})
headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api-key}}'
}
conn.request("PUT", "/api/static-virtual-account/2701b82a-89f8-4343-81a2-fa0c92edca09", payload, headers)
res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))
```

> The above command returns JSON structured similar like this:

```json
{
    "id": "1414255-12121-21212121-212121",
    "status": {
        "code": "000",
        "message": "Success"
    },
    "amount": 50000,
    "va_number": "1001234000000000001",
    "bank_code": "002",
    "is_open": true,
    "is_single_use": false,
    "expiration_time": 1582802205412,
    "va_status": "WAITING_PAYMENT",
    "username_display": "vaname",
    "partner_user_id": "12345677",
    "trx_expiration_time": 1582802205412,
    "partner_trx_id": "TRX0002",
    "trx_counter": 1,
    "counter_incoming_payment" : 0
}
```

### HTTPS Request
**[Production]** `PUT <%= config[:endpoint_prod] %>/api/static-virtual-account/<ID>` <br/>
**[Staging]** `PUT <%= config[:endpoint_stg] %>/api/static-virtual-account/<ID>`

### URL Parameter
Parameter | Type | Required | Default | Description
--------- | ---- | -------- | ------- | -----------
ID | String(36) | TRUE | - | Unique VA ID, you can get this once you success created VA

### Request Parameters

Parameter | Type | Required | Default | Description
--------- | ---- | -------- | ------- | -----------
amount | BigDecimal | FALSE | - | Amount your user must paid to complete the transaction
is_single_use | Boolean | FALSE |  false | True means that this VA should be closed once there is a successful payment that is being made to this VA.
expiration_time | Long | FALSE | - | Expiration time of the VA in minutes, if empty VA will be expired in 24 hour. If you want to deactivate/cancel the VA, pass "0" in the expiration_time
username_display | String | - | - | Customizable VA display name that will be seen by user, If empty willl be using partner username
is_lifetime | Boolean | FALSE | - | false | If it is set to FALSE (default) then VA will expire based on the expiration time. Otherwise, it will remain active.
email | String(255) | FALSE | - | Email of user, using email standard format
trx_expiration_time | Long | FALSE | - | Transaction expiration time in minutes, e.g If Transaction want to be expired after 5 minutes, you just have to set expiration_time to 5. If you want to make the trx_expiration_time expired, pass "0" in the trx_expiration_time
partner_trx_id | String(255) | FALSE | - | Partner unique Transaction ID of a VA
trx_counter | Int | FALSE | -1/1 | Update transaction counter to limit number of transaction that can be receive by va number

### Response Parameters

Parameter | Type | Description
--------- | ---- | -----------
id | String |  Unique VA id
status | Object | Status of response in Object `{code: <status_code>, message: <status_message>}`
amount | BigDecimal | Amount of VA transaction
va_number | String(20) | Generated VA number
bank_code | String(3) | Bank code for VA, see [VA Bank Code](https://api-docs.oyindonesia.com/#va-aggregator-bank-code-va-aggregator)
is_open | Boolean | True means VA number can accept any amount, False means VA number only accept the specified amount in the field amount
is_single_use | Boolean | True means that this VA should be closed once there is a successful payment that is being made to this VA.
expiration_time | Long | Expiration time of VA on Unix timestamp in milliseconds, -1 means no expiration time.
va_status | String(16) | Status of VA, see [VA Status](https://api-docs.oyindonesia.com/#va-aggregator-status-va-aggregator)
username_display | String(255) | Customizable VA display name that will be seen by user, If empty willl be using partner username
partner_user_id | String(255) | Partner unique ID for specific user
trx_expiration_time | Long | Transaction expiration time on Unix timestamp in milliseconds, -1 means no expiration time.
partner_trx_id | String(255) | Partner unique Transaction ID of a VA
trx_counter | Int | Transaction counter to limit number of transaction that can be receive by va number, if empty will be use default value -1 for multiple use va, and 1 for single use va. If counter reach zero, va cannot be inquiry or accept payment.
counter_incoming_payment | Integer | Count total incoming payment of VA

## Get list of created VA

Get list of created VA

```shell
curl -X \
GET <%= config[:endpoint_prod] %>/api/static-virtual-account?offset=0&limit=10
-H 'content-type: application/json' \
-H 'accept: application/json' \
-H 'x-oy-username: username' \
-H 'x-api-key: apikey'
```

```dart
var headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api-key}}'
};
var request = http.Request('GET', Uri.parse('{{base_url}}/api/static-virtual-account?offset=0&limit=5'));
request.headers.addAll(headers);

http.StreamedResponse response = await request.send();

if (response.statusCode == 200) {
  print(await response.stream.bytesToString());
}
else {
  print(response.reasonPhrase);
}
```

```go
package main

import (
  "fmt"
  "strings"
  "net/http"
  "io/ioutil"
)

func main() {

  url := "%7B%7Bbase_url%7D%7D/api/static-virtual-account?offset=0&limit=5"
  method := "GET"

  client := &http.Client {
  }
  req, err := http.NewRequest(method, url)

  if err != nil {
    fmt.Println(err)
    return
  }
  req.Header.Add("Content-Type", "application/json")
  req.Header.Add("X-Oy-Username", "{{username}}")
  req.Header.Add("X-Api-Key", "{{api-key}}")

  res, err := client.Do(req)
  if err != nil {
    fmt.Println(err)
    return
  }
  defer res.Body.Close()

  body, err := ioutil.ReadAll(res.Body)
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(string(body))
}
```

```java
OkHttpClient client = new OkHttpClient().newBuilder()
  .build();
Request request = new Request.Builder()
  .url("{{base_url}}/api/static-virtual-account?offset=0&limit=5")
  .method("GET", null)
  .addHeader("Content-Type", "application/json")
  .addHeader("X-Oy-Username", "{{username}}")
  .addHeader("X-Api-Key", "{{api-key}}")
  .build();
Response response = client.newCall(request).execute();
```

```javascript
var xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function() {
  if(this.readyState === 4) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "%7B%7Bbase_url%7D%7D/api/static-virtual-account?offset=0&limit=5");
xhr.setRequestHeader("Content-Type", "application/json");
xhr.setRequestHeader("X-Oy-Username", "{{username}}");
xhr.setRequestHeader("X-Api-Key", "{{api-key}}");

xhr.send();
```

```php
<?php
require_once 'HTTP/Request2.php';
$request = new HTTP_Request2();
$request->setUrl('{{base_url}}/api/static-virtual-account?offset=0&limit=5');
$request->setMethod(HTTP_Request2::METHOD_GET);
$request->setConfig(array(
  'follow_redirects' => TRUE
));
$request->setHeader(array(
  'Content-Type' => 'application/json',
  'X-Oy-Username' => '{{username}}',
  'X-Api-Key' => '{{api-key}}'
));

try {
  $response = $request->send();
  if ($response->getStatus() == 200) {
    echo $response->getBody();
  }
  else {
    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .
    $response->getReasonPhrase();
  }
}
catch(HTTP_Request2_Exception $e) {
  echo 'Error: ' . $e->getMessage();
}
```

```python
import http.client
import json

conn = http.client.HTTPSConnection("{{base_url}}")
payload = ''
headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api-key}}'
}
conn.request("GET", "/api/static-virtual-account?offset=0&limit=5", payload, headers)
res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))
```

> The above command returns JSON structured similar like this:

```json
{
    "total": 5,
    "data": [
        {
            "id": "9a660428-3373-436b-b929-ef69698dd26f",
            "amount": 12000.0000,
            "va_number": "100536000000000006",
            "bank_code": "002",
            "bank_name": "Bank BRI",
            "is_open": true,
            "is_single_use": false,
            "expiration_time": 1582791896416,
            "va_status": "EXPIRED",
            "username_display": "username",
            "amount_detected": 400000,
            "partner_user_id": "12345",
            "created" : 1613545965167,
            "counter_incoming_payment" : 0,
            "trx_expiration_time": 1582802205412,
            "partner_trx_id": "TRX0002",
            "trx_counter": 0
        },
        {
            "id": "de51383f-1557-409c-8542-dcb74ca76375",
            "amount": 12000.0000,
            "va_number": "100536000000000005",
            "bank_code": "002",
            "bank_name": "Bank BRI",
            "is_open": true,
            "is_single_use": false,
            "expiration_time": 1582790250609,
            "va_status": "EXPIRED",
            "username_display": "username",
            "amount_detected": 500000,
            "partner_user_id": "54321",
            "created" : 1613545965167,
            "counter_incoming_payment" : 0,
            "trx_expiration_time": 1582802205412,
            "partner_trx_id": "TRX0002",
            "trx_counter": 0
        }
    ],
    "status": {
        "code": "000",
        "message": "Success"
    }
}
```

### HTTPS Request
**[Production]** `GET <%= config[:endpoint_prod] %>/api/static-virtual-account?offset=<offset>&limit=<limit>` <br/>
**[Staging]** `GET <%= config[:endpoint_stg] %>/api/static-virtual-account?offset=<offset>&limit=<limit>`

### Request Parameters
Parameter | Type | Default | Description
--------- | ---- | ------- | -----------
offset | Integer | 0 | start offset, default is 0, if empty will used default value
limit | Integer | 10 | max item to fetch, default is 10, if empty will used default value

### Response Parameters
Parameter | Type | Description
--------- | ---- | -----------
total | Integer | total items
data  | Array of object | List of Object `{id: <va_id>, amount: <amount>, va_number: <va_number>, bank_code: <bank_code>, bank_name: <bank_name>, is_open: <is_open>, is_single_user: <is_single_user>, expiration_time: <expiration_time>, va_status: <va_status>, username_display: <username_display>, amount_detected: <amount_detected>, partner_user_id: <partner_user_id>, created: <created>, counter_incoming_payment: <counter_incoming_payment>, trx_counter: <trx_counter>}`
status | Object | Status of response in Object `{code: <status_code>, message: <status_message>}`


## Get List of Transaction for VA

Get list of incoming transaction for specific va number.

```shell
curl -X \
GET <%= config[:endpoint_prod] %>/api/va-tx-history/2701b82a-89f8-4343-81a2-fa0c92edca09?offset=0&limit=10
-H 'content-type: application/json' \
-H 'accept: application/json' \
-H 'x-oy-username: username' \
-H 'x-api-key: apikey'
```

```dart
var headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api-key}}'
};
var request = http.Request('GET', Uri.parse('{{base_url}}/api/va-tx-history/2701b82a-89f8-4343-81a2-fa0c92edca09?offset=0&limit=5'));
request.headers.addAll(headers);

http.StreamedResponse response = await request.send();

if (response.statusCode == 200) {
  print(await response.stream.bytesToString());
}
else {
  print(response.reasonPhrase);
}

```

```go
package main

import (
  "fmt"
  "strings"
  "net/http"
  "io/ioutil"
)

func main() {

  url := "%7B%7Bbase_url%7D%7D/api/va-tx-history/2701b82a-89f8-4343-81a2-fa0c92edca09?offset=0&limit=5"
  method := "GET"

  client := &http.Client {
  }
  req, err := http.NewRequest(method, url)

  if err != nil {
    fmt.Println(err)
    return
  }
  req.Header.Add("Content-Type", "application/json")
  req.Header.Add("X-Oy-Username", "{{username}}")
  req.Header.Add("X-Api-Key", "{{api-key}}")

  res, err := client.Do(req)
  if err != nil {
    fmt.Println(err)
    return
  }
  defer res.Body.Close()

  body, err := ioutil.ReadAll(res.Body)
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(string(body))
}
```

```java
OkHttpClient client = new OkHttpClient().newBuilder()
  .build();
Request request = new Request.Builder()
  .url("{{base_url}}/api/va-tx-history/2701b82a-89f8-4343-81a2-fa0c92edca09?offset=0&limit=5")
  .method("GET", null)
  .addHeader("Content-Type", "application/json")
  .addHeader("X-Oy-Username", "{{username}}")
  .addHeader("X-Api-Key", "{{api-key}}")
  .build();
Response response = client.newCall(request).execute();
```

```javascript
var xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function() {
  if(this.readyState === 4) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "%7B%7Bbase_url%7D%7D/api/va-tx-history/2701b82a-89f8-4343-81a2-fa0c92edca09?offset=0&limit=5");
xhr.setRequestHeader("Content-Type", "application/json");
xhr.setRequestHeader("X-Oy-Username", "{{username}}");
xhr.setRequestHeader("X-Api-Key", "{{api-key}}");

xhr.send();
```

```php
<?php
require_once 'HTTP/Request2.php';
$request = new HTTP_Request2();
$request->setUrl('{{base_url}}/api/va-tx-history/2701b82a-89f8-4343-81a2-fa0c92edca09?offset=0&limit=5');
$request->setMethod(HTTP_Request2::METHOD_GET);
$request->setConfig(array(
  'follow_redirects' => TRUE
));
$request->setHeader(array(
  'Content-Type' => 'application/json',
  'X-Oy-Username' => '{{username}}',
  'X-Api-Key' => '{{api-key}}'
));

try {
  $response = $request->send();
  if ($response->getStatus() == 200) {
    echo $response->getBody();
  }
  else {
    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .
    $response->getReasonPhrase();
  }
}
catch(HTTP_Request2_Exception $e) {
  echo 'Error: ' . $e->getMessage();
}
```

```python
import http.client
import json

conn = http.client.HTTPSConnection("{{base_url}}")
payload = ''
headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api-key}}'
}
conn.request("GET", "/api/va-tx-history/2701b82a-89f8-4343-81a2-fa0c92edca09?offset=0&limit=5", payload, headers)
res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))
```

> The above command returns JSON structured similar like this:

```json
{
    "id": "12345676788898",
    "status": {
        "code": "000",
        "message": "Success"
    },
    "data": [
        {
            "id": "d9c2963f-be14-4558-9380-5ba1db8ed156",
            "created": "2020-02-27 07:48:01",
            "name": "Static VA by username",
            "amount": 10000,
            "create_by": "Static VA by username",
            "last_update_by": "Static VA by username",
            "last_updated": "2020-02-27 10:08:01",
            "admin_fee": 1000,
            "va_number": "123456000000000001",
            "va_history_id": "3d5c41e6-04ac-4f1a-bd5e-53887fedf98f",
            "settlement_time": "2020-02-28 15:00:00",
            "settlement_status": "WAITING"
        }
    ],
    "number_of_transaction": 1,
    "total_incoming_payment": 10000
}
```

### HTTPS Request
**[Production]** `GET <%= config[:endpoint_prod] %>/api/va-tx-history/<ID>?offset=<offset>&limit=<limit>` <br/>
**[Staging]** `GET <%= config[:endpoint_stg] %>/api/va-tx-history/<ID>?offset=<offset>&limit=<limit>`

### URL Parameter
Parameter | Type | Required | Default | Description
--------- | ---- | -------- | ------- | -----------
ID | String(36) | TRUE | - | Unique VA ID, you can get this once you success created VA

### Request Parameters
Parameter | Type | Required | Default | Description
--------- | ---- | ---------- | -------- | ------- | -----------
offset | Integer | FALSE | 0 | start offset, default is 0, if empty will used default value
limit | Integer | FALSE | 10 | max item to fetch, default is 10, if empty will used default value

### Response Parameters
Parameter | Type | Description
--------- | ---- | -----------
id | Integer | Unique VA id
status | Object | Status of response in Object `{code: <status_code>, message: <status_message>}`
data  | Array of Object  | List of Object `{id:  <id>, created: <created>, name: <name>, amount: <amount>, create_by: <create_by>, last_update_by: <last_update_by>, last_updated: <last_updated>, admin_fee: <admin_fee>, va_number: <va_number>, va_history_id: <va_history_id>, settlement_time: <settlement_time>, settlement_status: <settlement_status>}`
number_of_transaction  | Integer | Total transaction
total_incoming_payment | Integer | Total incoming payment

## Create Customized VA

Use this API to create new VA number with customized VA suffix.

```shell
curl -X \
POST <%= config[:endpoint_prod] %>/api/custom-va
-H 'content-type: application/json' \
-H 'accept: application/json' \
-H 'x-oy-username: username' \
-H 'x-api-key: apikey' \
-d '{
    "partner_user_id":"51200021",
    "bank_code": "002",
    "amount": 10000,
    "is_open": false, 
    "username_display": "va name",
    "email": "email@mail.com",
    "trx_expiration_time": 5,
    "partner_trx_id": "TRX0001",
    "va_suffix" : "081234567890"
}'
```

```dart
var headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api-key}}'
};
var request = http.Request('POST', Uri.parse('{{base_url}}/api/custom-va'));
request.body = json.encode({
    "partner_user_id":"51200021",
    "bank_code": "002",
    "amount": 10000,
    "is_open": false, 
    "username_display": "va name",
    "email": "email@mail.com",
    "trx_expiration_time": 5,
    "partner_trx_id": "TRX0001",
    "va_suffix" : "081234567890"
});
request.headers.addAll(headers);

http.StreamedResponse response = await request.send();

if (response.statusCode == 200) {
  print(await response.stream.bytesToString());
}
else {
  print(response.reasonPhrase);
}
```

```go
package main

import (
  "fmt"
  "strings"
  "net/http"
  "io/ioutil"
)

func main() {

  url := "%7B%7Bbase_url%7D%7D/api/custom-va"
  method := "POST"

  payload := strings.NewReader(`{
  "partner_user_id":"51200021",
  "bank_code": "002",
  "amount": 10000,
  "is_open": false, 
  "username_display": "va name",
  "email": "email@mail.com",
  "trx_expiration_time": 5,
  "partner_trx_id": "TRX0001",
  "va_suffix" : "081234567890"
}`)

  client := &http.Client {
  }
  req, err := http.NewRequest(method, url, payload)

  if err != nil {
    fmt.Println(err)
    return
  }
  req.Header.Add("Content-Type", "application/json")
  req.Header.Add("X-Oy-Username", "{{username}}")
  req.Header.Add("X-Api-Key", "{{api-key}}")

  res, err := client.Do(req)
  if err != nil {
    fmt.Println(err)
    return
  }
  defer res.Body.Close()

  body, err := ioutil.ReadAll(res.Body)
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(string(body))
}
```

```java
OkHttpClient client = new OkHttpClient().newBuilder()
  .build();
MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\n\"partner_user_id\":\"51200021\",\n\"bank_code\": \"002\",\n\"amount\": 10000,\n\"is_open\": false,\n\"username_display\": \"va name\",\n\"email\": \"email@mail.com\",\n\"trx_expiration_time\": 5,\n\"partner_trx_id\": \"TRX0001\",\n\"va_suffix\" : \"081234567890\"\n}");
Request request = new Request.Builder()
  .url("{{base_url}}/api/custom-va")
  .method("POST", body)
  .addHeader("Content-Type", "application/json")
  .addHeader("X-Oy-Username", "{{username}}")
  .addHeader("X-Api-Key", "{{api-key}}")
  .build();
Response response = client.newCall(request).execute();
```

```javascript
var data = JSON.stringify({
  "partner_user_id":"51200021",
  "bank_code": "002",
  "amount": 10000,
  "is_open": false, 
  "username_display": "va name",
  "email": "email@mail.com",
  "trx_expiration_time": 5,
  "partner_trx_id": "TRX0001",
  "va_suffix" : "081234567890"
});

var xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function() {
  if(this.readyState === 4) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "%7B%7Bbase_url%7D%7D/api/custom-va");
xhr.setRequestHeader("Content-Type", "application/json");
xhr.setRequestHeader("X-Oy-Username", "{{username}}");
xhr.setRequestHeader("X-Api-Key", "{{api-key}}");

xhr.send(data);
```

```php
<?php
require_once 'HTTP/Request2.php';
$request = new HTTP_Request2();
$request->setUrl('{{base_url}}/api/custom-va');
$request->setMethod(HTTP_Request2::METHOD_POST);
$request->setConfig(array(
  'follow_redirects' => TRUE
));
$request->setHeader(array(
  'Content-Type' => 'application/json',
  'X-Oy-Username' => '{{username}}',
  'X-Api-Key' => '{{api-key}}'
));
$request->setBody('"{\n\"partner_user_id\":\"51200021\",\n\"bank_code\": \"002\",\n\"amount\": 10000,\n\"is_open\": false,\n\"username_display\": \"va name\",\n\"email\": \"email@mail.com\",\n\"trx_expiration_time\": 5,\n\"partner_trx_id\": \"TRX0001\",\n\"va_suffix\" : \"081234567890\"\n}"');
try {
  $response = $request->send();
  if ($response->getStatus() == 200) {
    echo $response->getBody();
  }
  else {
    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .
    $response->getReasonPhrase();
  }
}
catch(HTTP_Request2_Exception $e) {
  echo 'Error: ' . $e->getMessage();
}
```

```python
import http.client
import json

conn = http.client.HTTPSConnection("{{base_url}}")
payload = json.dumps({
  "partner_user_id":"51200021",
  "bank_code": "002",
  "amount": 10000,
  "is_open": false, 
  "username_display": "va name",
  "email": "email@mail.com",
  "trx_expiration_time": 5,
  "partner_trx_id": "TRX0001",
  "va_suffix" : "081234567890"
})
headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api-key}}'
}
conn.request("POST", "/api/custom-va", payload, headers)
res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))
```

> The above command returns JSON structured similar like this:

```json
{
    "id": "12345b1-23be-45670-a123-5ca678f12b3e",
    "status": {
        "code": "000",
        "message": "Success"
    },
    "amount": 10000,
    "va_number": "134789181234567890",
    "bank_code": "002",
    "is_open": false,
    "va_status": "WAITING_PAYMENT",
    "username_display": "va name",
    "partner_user_id" : "51200021",
    "trx_expiration_time": 1582783668175,
    "partner_trx_id": "TRX0001"
}
```

### HTTPS Request
**[Production]** `POST <%= config[:endpoint_prod] %>/api/custom-va` <br/>
**[Staging]** `POST <%= config[:endpoint_stg] %>/api/custom-va`

### Request Parameters

Parameter | Type | Required | Default | Description
--------- | ---- | -------- | ------- | -----------
partner_user_id | String(255) | TRUE | - | Partner unique ID for specific user
bank_code | String(3) | TRUE | - | Bank code which the VA number will be generated. Currently our system support customized VA BRI and CIMB. For bank code detail, please refer to [VA Bank Code](https://api-docs.oyindonesia.com/#va-aggregator-bank-code-va-aggregator)
amount | BigDecimal | FALSE | 0 | Amount your user must paid to complete the transaction, if is_open is false, amount is required.
is_open | Boolean | FALSE | true | If set true means VA number can accept any amount, field `amount` can be optional, if set false means VA number only accept the specified amount in the field amount. When you set `is_open` to false, you must specify amount field.
username_display | String(255) | FALSE | username | Customizable VA display name that will be seen by user, If empty willl be using partner username
email | String(255) | FALSE | - | Email of user, using email standard format
trx_expiration_time | Long | FALSE | - | Transaction expiration time in minutes, e.g If Transaction want to be expired after 5 minutes, you just have to set expiration_time to 5. If empty, there will be no transaction expiration time.
partner_trx_id | String(255) | FALSE | - | Partner unique Transaction ID of a VA
va_suffix | String (10-12) | TRUE | - | Customized VA suffix that will be used by user. Must consists of digit only. Please note that given suffix may be trimmed from the front if it exceeds maximum VA digit capacity.

### Response Parameters

Parameter | Type | Description
--------- | ---- | -----------
status | Object | Status of response in Object `{code: <status_code>, message: <status_message>}`
amount | BigDecimal | Amount of VA transaction
va_number | String(20) | Generated VA number
id | String(36) | Unique VA ID
partner_user_id | String(255) | Your unique ID for specific user
bank_code | String(3) | Bank code for VA, see [VA Bank Code](https://api-docs.oyindonesia.com/#va-aggregator-bank-code-va-aggregator)
is_open | Boolean | True means VA number can accept any amount, False means VA number only accept the specified amount in the field amount
va_status | String(16) | Status of VA, see [VA Status](https://api-docs.oyindonesia.com/#va-aggregator-status-va-aggregator)
username_display | String(255) | Customizable VA display name that will be seen by user, If empty willl be using partner username
trx_expiration_time | Long | Transaction expiration time on Unix timestamp in milliseconds, -1 means no expiration time.
partner_trx_id | String(255) | Partner unique Transaction ID of a VA

## Update Customized VA

Update Customized VA using unique VA id.

```shell
curl -X \
PUT <%= config[:endpoint_prod] %>/api/custom-va/1414255-12121-21212121-212121
-H 'content-type: application/json' \
-H 'accept: application/json' \
-H 'x-oy-username: username' \
-H 'x-api-key: apikey' \
-d '{
    "amount": 50000,
    "username_display": "test",
    "email": "email@domain.com",
    "trx_expiration_time": 5,
    "partner_trx_id": "TRX0002"
}'
```

```dart
var headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api-key}}'
};
var request = http.Request('PUT', Uri.parse('{{base_url}}/api/custom-va/2701b82a-89f8-4343-81a2-fa0c92edca09'));
request.body = json.encode({
  "amount": 50000,
  "username_display": "test",
  "email": "email@domain.com",
  "trx_expiration_time": 5,
  "partner_trx_id": "TRX0002"
});
request.headers.addAll(headers);

http.StreamedResponse response = await request.send();

if (response.statusCode == 200) {
  print(await response.stream.bytesToString());
}
else {
  print(response.reasonPhrase);
}
```

```go
package main

import (
  "fmt"
  "strings"
  "net/http"
  "io/ioutil"
)

func main() {

  url := "%7B%7Bbase_url%7D%7D/api/custom-va/2701b82a-89f8-4343-81a2-fa0c92edca09"
  method := "PUT"

  payload := strings.NewReader(`{
  "amount": 50000,
  "username_display": "test",
  "email": "email@domain.com",
  "trx_expiration_time": 5,
  "partner_trx_id": "TRX0002"
}`)

  client := &http.Client {
  }
  req, err := http.NewRequest(method, url, payload)

  if err != nil {
    fmt.Println(err)
    return
  }
  req.Header.Add("Content-Type", "application/json")
  req.Header.Add("X-Oy-Username", "{{username}}")
  req.Header.Add("X-Api-Key", "{{api-key}}")

  res, err := client.Do(req)
  if err != nil {
    fmt.Println(err)
    return
  }
  defer res.Body.Close()

  body, err := ioutil.ReadAll(res.Body)
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(string(body))
}
```

```java
OkHttpClient client = new OkHttpClient().newBuilder()
  .build();
MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\n\t\"amount\": 50000,\n\t\"username_display\": "test",\n\t\"email\": "email@domain.com",\n\t\"trx_expiration_time\": 5,\n\t\"partner_trx_id\": \"TRX0002\"\n}");
Request request = new Request.Builder()
  .url("{{base_url}}/api/custom-va/2701b82a-89f8-4343-81a2-fa0c92edca09")
  .method("PUT", body)
  .addHeader("Content-Type", "application/json")
  .addHeader("X-Oy-Username", "{{username}}")
  .addHeader("X-Api-Key", "{{api-key}}")
  .build();
Response response = client.newCall(request).execute();
```

```javascript
var data = JSON.stringify({
  "amount": 50000,
  "username_display": "test",
  "email": "email@domain.com",
  "trx_expiration_time": 5,
  "partner_trx_id": "TRX0002"
});

var xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function() {
  if(this.readyState === 4) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "%7B%7Bbase_url%7D%7D/api/custom-va/2701b82a-89f8-4343-81a2-fa0c92edca09");
xhr.setRequestHeader("Content-Type", "application/json");
xhr.setRequestHeader("X-Oy-Username", "{{username}}");
xhr.setRequestHeader("X-Api-Key", "{{api-key}}");

xhr.send(data);
```

```php
<?php
require_once 'HTTP/Request2.php';
$request = new HTTP_Request2();
$request->setUrl('{{base_url}}/api/custom-va`/2701b82a-89f8-4343-81a2-fa0c92edca09');
$request->setMethod(HTTP_Request2::METHOD_PUT);
$request->setConfig(array(
  'follow_redirects' => TRUE
));
$request->setHeader(array(
  'Content-Type' => 'application/json',
  'X-Oy-Username' => '{{username}}',
  'X-Api-Key' => '{{api-key}}'
));
$request->setBody('{\n  "amount": 50000,\n  "username_display": "test",\n "email": "email@domain.com",\n  "trx_expiration_time": 5,\n "partner_trx_id": "TRX0002"\n}');
try {
  $response = $request->send();
  if ($response->getStatus() == 200) {
    echo $response->getBody();
  }
  else {
    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .
    $response->getReasonPhrase();
  }
}
catch(HTTP_Request2_Exception $e) {
  echo 'Error: ' . $e->getMessage();
}
```

```python
import http.client
import json

conn = http.client.HTTPSConnection("{{base_url}}")
payload = json.dumps({
  "amount": 50000,
  "username_display": "test",
  "email": "email@domain.com",
  "trx_expiration_time": 5,
  "partner_trx_id": "TRX0002"
})
headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api-key}}'
}
conn.request("PUT", "/api/custom-va/2701b82a-89f8-4343-81a2-fa0c92edca09", payload, headers)
res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))
```

> The above command returns JSON structured similar like this:

```json
{
    "id": "1414255-12121-21212121-212121",
    "status": {
        "code": "000",
        "message": "Success"
    },
    "amount": 50000,
    "va_number": "134789181234567890",
    "bank_code": "002",
    "is_open": false,
    "va_status": "WAITING_PAYMENT",
    "username_display": "test",
    "partner_user_id": "12345677",
    "trx_expiration_time": 1582802205412,
    "partner_trx_id": "TRX0002",
}
```

### HTTPS Request
**[Production]** `PUT <%= config[:endpoint_prod] %>/api/custom-va/<ID>` <br/>
**[Staging]** `PUT <%= config[:endpoint_stg] %>/api/custom-va/<ID>`

### URL Parameter
Parameter | Type | Required | Default | Description
--------- | ---- | -------- | ------- | -----------
ID | String(36) | TRUE | - | Unique VA id, you can get this once you have successfully created a customized VA

### Request Parameters

Parameter | Type | Required | Default | Description
--------- | ---- | -------- | ------- | -----------
amount | BigDecimal | FALSE | - | Amount your user must paid to complete the transaction
username_display | String | - | - | Customizable VA display name that will be seen by user, If empty willl be using partner username
email | String(255) | FALSE | - | Email of user, using email standard format
trx_expiration_time | Long | FALSE | - | Transaction expiration time in minutes, e.g If Transaction want to be expired after 5 minutes, you just have to set expiration_time to 5. If you want to make the trx_expiration_time expired, pass "0" in the trx_expiration_time
partner_trx_id | String(255) | FALSE | - | Partner unique Transaction ID of a VA

### Response Parameters

Parameter | Type | Description
--------- | ---- | -----------
id | String |  Unique VA id
status | Object | Status of response in Object `{code: <status_code>, message: <status_message>}`
amount | BigDecimal | Amount of VA transaction
va_number | String(20) | Generated VA number
bank_code | String(3) | Bank code for VA, see [VA Bank Code](https://api-docs.oyindonesia.com/#va-aggregator-bank-code-va-aggregator)
is_open | Boolean | True means VA number can accept any amount, False means VA number only accept the specified amount in the field amount
va_status | String(16) | Status of VA, see [VA Status](https://api-docs.oyindonesia.com/#va-aggregator-status-va-aggregator)
username_display | String(255) | Customizable VA display name that will be seen by user, If empty willl be using partner username
partner_user_id | String(255) | Partner unique ID for specific user
trx_expiration_time | Long | Transaction expiration time on Unix timestamp in milliseconds, -1 means no expiration time.
partner_trx_id | String(255) | Partner unique Transaction ID of a VA

## Deactivate Customized VA 

Use this API to deactivate an existing customized VA using unique VA id. 


```shell
curl -X \
DELETE <%= config[:endpoint_prod] %>/api/custom-va/1414255-12121-21212121-212121
-H 'content-type: application/json' \
-H 'accept: application/json' \
-H 'x-oy-username: username' \
-H 'x-api-key: apikey'
```

```dart
var headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api_key}}'
};
var request = http.Request('DELETE', Uri.parse('{{base_url}}/api/custom-va/2c26f23d-2dfa-44d1-9202-f8c1f907a983'));

request.headers.addAll(headers);

http.StreamedResponse response = await request.send();

if (response.statusCode == 200) {
  print(await response.stream.bytesToString());
}
else {
  print(response.reasonPhrase);
}
```

```go
package main

import (
  "fmt"
  "net/http"
  "io/ioutil"
)

func main() {

  url := "%7B%7Bbase_url%7D%7D/api/custom-va/2c26f23d-2dfa-44d1-9202-f8c1f907a983"
  method := "DELETE"

  client := &http.Client {
  }
  req, err := http.NewRequest(method, url, nil)

  if err != nil {
    fmt.Println(err)
    return
  }
  req.Header.Add("Content-Type", "application/json")
  req.Header.Add("X-Oy-Username", "{{username}}")
  req.Header.Add("X-Api-Key", "{{api_key}}")

  res, err := client.Do(req)
  if err != nil {
    fmt.Println(err)
    return
  }
  defer res.Body.Close()

  body, err := ioutil.ReadAll(res.Body)
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(string(body))
}
```

```java
OkHttpClient client = new OkHttpClient().newBuilder()
  .build();
Request request = new Request.Builder()
  .url("{{base_url}}/api/custom-va/2c26f23d-2dfa-44d1-9202-f8c1f907a983")
  .method("DELETE", null)
  .addHeader("Content-Type", "application/json")
  .addHeader("X-Oy-Username", "{{username}}")
  .addHeader("X-Api-Key", "{{api_key}}")
  .build();
Response response = client.newCall(request).execute();
```

```javascript

var xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function() {
  if(this.readyState === 4) {
    console.log(this.responseText);
  }
});

xhr.open("DELETE", "%7B%7Bbase_url%7D%7D/api/custom-va/2c26f23d-2dfa-44d1-9202-f8c1f907a983");
xhr.setRequestHeader("Content-Type", "application/json");
xhr.setRequestHeader("X-Oy-Username", "{{username}}");
xhr.setRequestHeader("X-Api-Key", "{{api_key}}");

xhr.send();
```

```php
<?php
require_once 'HTTP/Request2.php';
$request = new HTTP_Request2();
$request->setUrl('{{base_url}}/api/custom-va/2c26f23d-2dfa-44d1-9202-f8c1f907a983');
$request->setMethod(HTTP_Request2::METHOD_DELETE);
$request->setConfig(array(
  'follow_redirects' => TRUE
));
$request->setHeader(array(
  'Content-Type' => 'application/json',
  'X-Oy-Username' => '{{username}}',
  'X-Api-Key' => '{{api_key}}'
));
try {
  $response = $request->send();
  if ($response->getStatus() == 200) {
    echo $response->getBody();
  }
  else {
    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .
    $response->getReasonPhrase();
  }
}
catch(HTTP_Request2_Exception $e) {
  echo 'Error: ' . $e->getMessage();
}
```

```python
import http.client
import json

conn = http.client.HTTPSConnection("{{base_url}}")
payload = ''
headers = {
  'Content-Type': 'application/json',
  'X-Oy-Username': '{{username}}',
  'X-Api-Key': '{{api_key}}'
}
conn.request("DELETE", "/api/custom-va/2c26f23d-2dfa-44d1-9202-f8c1f907a983", payload, headers)
res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))
```

> The above command returns JSON structured similar like this:

```json
{
    "status": {
        "code": "000",
        "message": "Success"
    }
}
```

### HTTPS Request
**[Production]** `DELETE <%= config[:endpoint_prod] %>/api/custom-va/<ID>` <br/>
**[Staging]** `DELETE <%= config[:endpoint_stg] %>/api/custom-va/<ID>`

### URL Parameters

Parameter | Type | Required | Default | Description
--------- | ---- | -------- | ------- | -----------
ID | String(255) | TRUE | - | Unique VA id, you can get this once you have successfully created a customized VA

### Response Parameters

Parameter | Type | Description
--------- | ---- | -----------
status | Object | Status of response in Object `{code: <status_code>, message: <status_message>}`


## Partner Callback Va Aggregator

> Response callback:

```json
{
	"va_number": "1234567",
	"amount": 100000,
	"partner_user_id": "oy0000000001",
	"success": true,
    "tx_date": "31/01/2020T01:01:01.000+0000",
    "username_display": "VA Name",
    "trx_expiration_date": "31/01/2020T01:01:01.000+0000",
    "partner_trx_id": "TRX0002",
    "trx_id": "12345-12345-12453-12455",
    "settlement_time": "01/02/2020T15:00:00.000+0000",
    "settlement_status": "WAITING"
}
```

Once user successfully do the payment, our system will make a callback via HTTP POST request to your system

### Callback Parameters

Parameter | Type | Description
--------- | ---- | -----------
va_number | String(20) | Generated VA number
amount | BigDecimal | Amount of VA transaction
partner_user_id | String(255) | Your unique ID for specific user
success | boolean | The status of the payment and it is always set to SUCCESS
tx_date | Timestamp | Incoming payment transaction date, format `dd/MM/yyyy'T'HH:mm:ss.SSSZZZZ`
username_display | String(255) | Customizable VA display name that will be seen by user, If empty willl be using partner username
trx_expiration_date | Long | Transaction expiration date, format `dd/MM/yyyy'T'HH:mm:ss.SSSZZZZ`
partner_trx_id | String(255) | Partner unique Transaction ID for specific transaction
trx_id | String (255) | Unique ID of incoming payment
settlement_time | Timestamp | The timestamp (in UTC+7) indicating when the fund will be settled to partner’s account statement, format `dd/MM/yyyy'T'HH:mm:ss.SSSZZZZ`
settlement_status | String(255) | The status of the settlement

<aside class="warning">
Note: For payments and inquiries involving a BSI VA using BSI Mobile or Banking Syariah Indonesia Net, please only input the last 12 digits of the va_number (remove 6059 from the va_number with format "6059xxxxxxxxxxxx"). This does not apply to payments and inquiries involving a BSI VA using other methods
</aside>

## VA aggregator Bank Code
### Available Bank for VA aggregator

| Bank (Virtual Account) | Bank Code                                      | Open & Closed Amount Capability                | Lifetime Capability                            | Maximum Expiration Time                        |
| ---------------------- | ---------------------------------------------- | ---------------------------------------------- | ---------------------------------------------- | ---------------------------------------------- |
| BNI                    | 009                                            | Closed Amount                                  | Supported                                      | -                                              |
| Bank Mandiri           | 008                                            | Open Amount, Closed Amount                     | Supported                                      | -                                              |
| BRI                    | O02                                            | Open Amount, Closed Amount                     | Supported                                      | -                                              |
| BCA                    | 014                                            | Open Amount, Closed Amount                     | Supported                                      | -                                              |
| Bank Permata/Permata Syariah| 013                                       | Open Amount, Closed Amount                     | Supported                                      | -                                              |
| CIMB Niaga/CIMB Niaga Syariah| 022                                      | Open Amount, Closed Amount                     | Supported                                      | -                                              |
| BTPN                   | 213                                            | Open Amount, Closed Amount                     | Supported                                      | -                                              |
| BSI (Bank Syariah Indonesia)| 451                                       | Closed Amount                                  | Not Supported                                  | 99999 minutes                                  |
| Maybank BII            | 016                                            | Open Amount, Closed Amount                     | Supported                                      | -                                              |
| KEB Hana               | 484                                            | Open Amount, Closed Amount                     | Supported                                      | -                                              |
| Bank Danamon           | 011                                            | Open Amount, Closed Amount                     | Supported                                      | -                                              |

For all available banks, there is no minimum expiration time.

## List of Documents
To enable VA Bank BCA, we need partner to send documents using email, directly to our business representative.

### Common Documents
No | Document
--- | ---------
1 | Taxpayer Registration Number
2 | National ID

### Documents for Foundation, or Donation Partner
No | Documents
--- | ---------
1 | Akta Pendirian Perusahaan
2 | Keputusan Dewan Pembina Yayasan
3 | Persetujuan Menhumham
4 | Taxpayer Registration Number Organization
5 | Izin Usaha
6 | Surat Keterangan Domisili
7 | Sertifikat Yayasan

### Documents for Other Company
No | Documents
--- | ---------
1 | Trade Business License
2 | Company's Deed
3 | Company Registration Certificate
4 | Decree of Minister Justine and Human Right

## VA aggregator Status
### Available Status for VA aggregator
Status | Description
------ | -----------
WAITING_PAYMENT | This status means that VA is active and can receive a payment
PAYMENT_DETECTED | This status means that there are incoming payment to VA Number
EXPIRED | This status means that VA is expired. You cannot accept or make update to VA Number with this status.
STATIC_TRX_EXPIRED | This status means that Transaction is expired. If VA have a unlimited lifetime, you can create a new transaction using update va info.
COMPLETE | This status means that VA is closed/complete after get incoming payment. You cannot accept or make update to VA Number with this status. Only Static VA with attribute `is_single_use` true can have this status.
